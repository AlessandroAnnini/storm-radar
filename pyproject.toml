[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "storm-radar"
version = "0.1.0"
description = "Advanced early warning system for dangerous weather conditions along the Adriatic coast, featuring Bora wind detection, lightning tracking, and marine hazard monitoring"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Alessandro Filippo Annini", email = "alessandro.annini@gmail.com"},
]
maintainers = [
    {name = "Alessandro Filippo Annini", email = "alessandro.annini@gmail.com"},
]
keywords = [
    "weather",
    "storm",
    "bora",
    "adriatic",
    "meteorology",
    "early-warning",
    "marine",
    "lightning",
    "telegram",
    "falconara",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Communications :: Chat",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: System :: Monitoring",
]

dependencies = [
    "python-dotenv>=1.1.0",
    "requests>=2.31.0",
    "rich>=14.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "responses>=0.23.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
]

[project.urls]
Homepage = "https://github.com/alessandroannini/storm-radar"
Documentation = "https://github.com/alessandroannini/storm-radar#readme"
Repository = "https://github.com/alessandroannini/storm-radar.git"
Issues = "https://github.com/alessandroannini/storm-radar/issues"
Changelog = "https://github.com/alessandroannini/storm-radar/blob/main/CHANGELOG.md"

[project.scripts]
storm-radar = "storm_radar.main:main"
storm-radar-check = "storm_radar.main:single_check"

[tool.hatch.build.targets.wheel]
packages = ["src/storm_radar"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/README.md",
    "/LICENSE",
    "/CHANGELOG.md",
]

# Black formatting configuration
[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorting configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=storm_radar",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# mypy type checking configuration
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "requests.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
branch = true
source = ["src/storm_radar"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "black>=25.1.0",
    "isort>=6.0.1",
    "mypy>=1.16.1",
    "pytest>=8.4.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
]
